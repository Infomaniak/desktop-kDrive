name: Release kDrive Desktop app

on:
  workflow_dispatch:  
    inputs:
      environment:
        type: environment
        description: Select the deployment environment
        default: Internal beta

concurrency:
  group: kDrive-desktop-release-${{ github.head_ref }}
  cancel-in-progress: true

env:
  KDRIVE_TEST_CI_API_TOKEN: ${{ secrets.KDRIVE_TOKEN }}
  KDRIVE_TEST_CI_ACCOUNT_ID: ${{ vars.KDRIVE_TEST_CI_ACCOUNT_ID }}
  KDRIVE_TEST_CI_USER_ID: ${{ vars.KDRIVE_TEST_CI_USER_ID }}
  KDRIVE_TEST_CI_DRIVE_ID: ${{ vars.KDRIVE_TEST_CI_DRIVE_ID }}
  KDRIVE_TEST_CI_REMOTE_DIR_ID: ${{ vars.KDRIVE_TEST_CI_REMOTE_DIR_ID }}
  KDRIVE_TEST_CI_LOCAL_PATH: ${{ vars.KDRIVE_TEST_CI_LOCAL_PATH }}
  KDRIVE_TEST_CI_REMOTE_PATH: ${{ vars.KDRIVE_TEST_CI_REMOTE_PATH }}
  KDRIVE_TEST_CI_RUNNING_ON_CI: true
  QT_QPA_PLATFORM: offscreen

jobs:

  get-version:
    runs-on: [ self-hosted ]
    outputs:
      kDrive_version: ${{ steps.get-version-step.outputs.kDrive_version }}
    steps:
      - name: Read VERSION.cmake from repo
        id: get-version-step
        uses: actions/github-script@v7
        with:
          script: |
            const file = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'VERSION.cmake',
              ref: context.sha
            });
            const content = Buffer.from(file.data.content, file.data.encoding).toString();
            const major = content.match(/KDRIVE_VERSION_MAJOR\s+(\d+)/)?.[1];
            const minor = content.match(/KDRIVE_VERSION_MINOR\s+(\d+)/)?.[1];
            const patch = content.match(/KDRIVE_VERSION_PATCH\s+(\d+)/)?.[1];
            const date = new Date().toISOString().slice(0, 10).replace(/-/g, '');
            
            const full_version = `${major}.${minor}.${patch}.${date}`;
            core.setOutput("kDrive_version", `${full_version}`);
            core.info(`kDrive version is ${full_version}`);
            core.summary.addHeading('kDrive Desktop Version', 1);
            core.summary.addHeading(`${full_version}`, 3).write();
# Check translation files
  check-translations:
    runs-on: [self-hosted, Windows, desktop-kdrive-with-gui ]
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4
            
      - name: Check translations
        run: |
             cd translations\updateTool
             $result = .\Windows.ps1
             # Ensure that result contains FOUR TIMES the string "0 new"
             if ($result[2] -notmatch "0 new" -OR $result[5] -notmatch "0 new" -OR $result[8] -notmatch "0 new" -OR $result[11] -notmatch "0 new") {
                 Write-Host "Translation files are not up to date. Please run the update tool." -ForegroundColor Red
                 exit 1
             } else {
                 Write-Host "Translation files are up to date." -ForegroundColor Green
                 exit 0
             }

# Check Release Notes
  check-release-notes:
    needs: get-version
    runs-on: [ self-hosted, Linux, X64 ]
    steps:
      - name: Bypass this step for test purposes
        run: echo "This step is bypassed for test purposes"; exit 0
        shell: bash
#      - name: Checkout the PR
#        uses: actions/checkout@v4
#
#      - name: Check release notes
#        run: |
#          VERSION_NUMBER="${{ needs.get-version.outputs.kDrive_version }}"
#          BASE_NAME="kDrive-${VERSION_NUMBER}"
#          BASE_PATH="./release_notes/${BASE_NAME}"
#          OS=( "win" "linux" "macos" )
#          LANGUAGES=( "fr" "de" "es" "it" )
#          for os in "${OS[@]}"; do
#            for lang in "${LANGUAGES[@]}"; do
#              FILE="${BASE_PATH}/kDrive-${VERSION_NUMBER}-${os}-${lang}.html"
#              if [ ! -f "$FILE" ]; then
#                echo "Release notes file not found: $FILE"
#                exit 1
#              fi
#            done
#          done
#          echo "All release notes files are present."
#        shell: bash

# Build apps
  build-Windows:
    needs: [check-release-notes, check-translations]
    runs-on: [ self-hosted, Windows, desktop-kdrive-with-gui ] #with-gui is required for the build_windows action to unlock the release signing certificate
    outputs:
      kDrive_version: ${{ steps.build-windows-step.outputs.kDrive_version }}
    env:
      KDC_PHYSICAL_AUMID: ${{ secrets.KDC_PHYSICAL_AUMID }}
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build Windows
        id: build-windows-step
        uses: ./.github/actions/build_windows
        with:  
          physical_cert: ${{ secrets.WINDOWS_PHYSICAL_CERT }}
          physical_cert_pass: ${{ secrets.WINDOWS_PHYSICAL_CERT_PASSWORD }}
          release_build: true


  build-Linux:
    needs: [ check-release-notes, check-translations ]
    runs-on: [ self-hosted, Linux, X64, desktop-kdrive ]
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build Linux
        uses: ./.github/actions/build_linux
        with:
          release_build: true
      
# Tests Windows
  test-Windows:
    needs: build-Windows
    strategy:
      fail-fast: false
      matrix:
        test_name: ["kDrive_test_common", "kDrive_test_common_server", "kDrive_test_server", "kDrive_test_syncengine", "kDrive_test_parms"]
    runs-on: [ self-hosted, Windows ]
    env:
      KDRIVE_TEST_CI_LOCAL_PATH: "${{ github.workspace }}/test/test_ci"
      KDRIVE_SENTRY_ENVIRONMENT: "windows_ci_runner"
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.head_ref }}

      - name: Run test
        uses: ./.github/actions/test_windows
        with:
           test_name: ${{ matrix.test_name }}
           test_dependencies_version: ${{ vars.KDRIVE_TEST_DEPENDENCIES_VERSION }}

  test-Linux:
    needs: build-Linux
    strategy:
      fail-fast: false
      matrix:
        test_name: ["kDrive_test_parms"] #, "kDrive_test_common_server", "kDrive_test_server", "kDrive_test_syncengine", "kDrive_test_common"]
    runs-on: [ self-hosted, Linux, X64 ]
    env:
      KDRIVE_TEST_CI_LOCAL_PATH: "${{ github.workspace }}/test/test_ci"
      KDRIVE_SENTRY_ENVIRONMENT: "linux_ci_runner"
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.head_ref }}

      - name: Run test
        uses: ./.github/actions/test_linux
        with:
          test_name: ${{ matrix.test_name }}
          test_dependencies_version: ${{ vars.KDRIVE_TEST_DEPENDENCIES_VERSION }}

# Upload the installer to kDrive and sentry artifacts
  upload-to-kDrive-and-sentry:
   # needs: [test-Windows, build-Windows]
    needs: [get-version, build-Linux, test-Linux]
    runs-on: [self-hosted, Windows]
    env:
        KDRIVE_TOKEN: ${{ secrets.KDRIVE_TOKEN }}
        KDRIVE_ID: ${{ secrets.KDRIVE_ID }}
        KDRIVE_DIR_ID: ${{ secrets.KDRIVE_DIR_ID }}
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.head_ref }}
      
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-windows
          pattern: win-release-artifacts-*
          merge-multiple: true

      #- name: Download macOS artifacts
      #  uses: actions/download-artifact@v4
      #  with:
      #    path: build-macos
      #    pattern: mac-release-artifacts-*
      #    merge-multiple: true

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-linux
          pattern: linux-release-artifacts-*
          merge-multiple: true

      - name: Upload debug files and installers/appimage to kDrive
        run: powershell ./infomaniak-build-tools/upload-release-to-kDrive.ps1 -version "${{ needs.get-version.outputs.kDrive_version }}"

      - name: Download sentry-cli
        run: |
          Invoke-WebRequest -Uri https://github.com/getsentry/sentry-cli/releases/download/2.46.0/sentry-cli-Windows-x86_64.exe -OutFile sentry-cli.exe
        shell: powershell

      - name: Login to Sentry
        run: |
          .\sentry-cli.exe login --auth-token ${{ secrets.SENTRY_AUTH_TOKEN }}
        shell: powershell

      - name : Upload sentry artifacts - Windows
        run: |
          .\sentry-cli.exe debug-files upload --project kdrive-server .\build-windows\kDrive.pdb
          .\sentry-cli.exe debug-files upload --project kdrive-client .\build-windows\kDrive_client.pdb
          .\sentry-cli.exe debug-files upload --project kdrive-server --type sourcebundle .\build-windows\kDrive.src.zip
          .\sentry-cli.exe debug-files upload --project kdrive-client --type sourcebundle .\build-windows\kDrive_client.src.zip
        shell: powershell

      - name: Upload sentry artifacts - Linux
        run: |
          .\sentry-cli.exe debug-files upload --project kdrive-server .\build-linux\kDrive.pdb
          .\sentry-cli.exe debug-files upload --project kdrive-client .\build-linux\kDrive_client.pdb
          .\sentry-cli.exe debug-files upload --project kdrive-server --type sourcebundle .\build-linux\kDrive.src.zip
          .\sentry-cli.exe debug-files upload --project kdrive-client --type sourcebundle .\build-linux\kDrive_client.src.zip
        shell: powershell

# Upload to the storage server
  upload-app-to-storage-server:
    needs: [get-version, build-Linux, test-Linux]
    runs-on: [self-hosted, Windows, desktop-kdrive]
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.head_ref }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: installers
          pattern: "*-release-artifacts-installer"
          merge-multiple: true

      - name: Upload apps and release notes to storage server
        run: |
            Invoke-WebRequest -Uri https://dl.min.io/client/mc/release/windows-amd64/mc.exe -OutFile mc.exe
            powershell ./infomaniak-build-tools/upload-release-to-storage.ps1 -version "${{ needs.get-version.outputs.kDrive_version }}" -user "${{ secrets.STORAGE_SERVER_USER }}" -pass "${{ secrets.STORAGE_SERVER_PASSWORD }}"

# Update kStore
  update-kStore:
    needs: upload-app-to-storage-server
    runs-on: [self-hosted, Windows]
    steps:
      - name: Update kStore
        run: echo "TODO Update kStore..."
        shell: powershell
