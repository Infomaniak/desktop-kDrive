name: Release kDrive Desktop app

on:
  workflow_dispatch:  
    inputs:
      environment:
        type: environment
        description: Select the deployment environment
        default: Internal beta
      skip_tests:
        description: Skip unit tests
        default: 'false'

concurrency:
  group: kDrive-desktop-release-${{ github.head_ref }}
  cancel-in-progress: true

env:
  KDRIVE_TEST_CI_API_TOKEN: ${{ secrets.KDRIVE_TOKEN }}
  KDRIVE_TEST_CI_ACCOUNT_ID: ${{ vars.KDRIVE_TEST_CI_ACCOUNT_ID }}
  KDRIVE_TEST_CI_USER_ID: ${{ vars.KDRIVE_TEST_CI_USER_ID }}
  KDRIVE_TEST_CI_DRIVE_ID: ${{ vars.KDRIVE_TEST_CI_DRIVE_ID }}
  KDRIVE_TEST_CI_REMOTE_DIR_ID: ${{ vars.KDRIVE_TEST_CI_REMOTE_DIR_ID }}
  KDRIVE_TEST_CI_LOCAL_PATH: ${{ vars.KDRIVE_TEST_CI_LOCAL_PATH }}
  KDRIVE_TEST_CI_REMOTE_PATH: ${{ vars.KDRIVE_TEST_CI_REMOTE_PATH }}
  KDRIVE_TEST_CI_RUNNING_ON_CI: true
  QT_QPA_PLATFORM: offscreen

jobs:
# Check translation files
  check-translations:
    runs-on: [self-hosted, Windows, desktop-kdrive-with-gui ]
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4

      - name: Check translations
        run: |
             cd translations\updateTool
             $result = .\Windows.ps1
             # Ensure that result contains FOUR TIMES the string "0 new"
             if ($result[2] -notmatch "0 new" -OR $result[5] -notmatch "0 new" -OR $result[8] -notmatch "0 new" -OR $result[11] -notmatch "0 new") {
                 Write-Host "<h1>:stop_sign: Translation files are not up to date. Please run the update tool. </h1>" -ForegroundColor Red
                 "<h1>:stop_sign: Translation files are not up to date. Please run the update tool. </h1>" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
                 exit 1
             } else {
                 Write-Host ":white_check_mark: Translation files are up to date." -ForegroundColor Green
                 "<h1>:white_check_mark: Translation files are up to date.</h1>" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
                 exit 0
             }

# Check Release Notes
  check-release-notes:
    runs-on: [ self-hosted, Linux, X64 ]
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4

      - name: Get kDrive version
        id: get-version
        uses: ./.github/actions/get_version

      - name: Check release notes
        run: |
          VERSION_NUMBER="${{ steps.get-version.outputs.kDrive_version }}"  # Example: 3.9.20.20250820
          version_size=${#VERSION_NUMBER}
          end_position=$((size - 9))
          VERSION_NUMBER=${VERSION_NUMBER:0:$end_position}  # Removes the date, e.g., 20250820

          BASE_NAME="kDrive-${VERSION_NUMBER}"
          BASE_PATH="./release_notes/${BASE_NAME}"
          OS=( "win" "linux" "macos" )
          LANGUAGES=( "fr" "de" "es" "it" )
          for os in "${OS[@]}"; do
            for lang in "${LANGUAGES[@]}"; do
              FILE="${BASE_PATH}/kDrive-${VERSION_NUMBER}-${os}-${lang}.html"
              if [ ! -f "$FILE" ]; then
                echo "<h1>:stop_sign: Release Notes for kDrive-${VERSION_NUMBER} not found </h1>" >> $GITHUB_STEP_SUMMARY
                echo "$FILE is missing." >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
            done
          done
          echo "All release notes files are present."

          {
            echo "<h1>:white_check_mark: Release Notes for kDrive-${VERSION_NUMBER} found </h1>"
            echo "<table>"
            echo "<tr>"
            echo "  <td valign='top' width='33%'>"
            echo "    <h3>Windows</h3>"
            cat "${BASE_PATH}/kDrive-${VERSION_NUMBER}-win-en.html"
            echo "  </td>"
            echo "  <td valign='top' width='33%'>"
            echo "    <h3>Linux</h3>"
            cat "${BASE_PATH}/kDrive-${VERSION_NUMBER}-linux-en.html"
            echo "  </td>"
            echo "  <td valign='top' width='33%'>"
            echo "    <h3>macOS</h3>"
            cat "${BASE_PATH}/kDrive-${VERSION_NUMBER}-macos-en.html"
            echo "  </td>"
            echo "</tr>"
            echo "</table>"
          } >> $GITHUB_STEP_SUMMARY
        shell: bash

# Build apps
  build-Windows:
    needs: [ check-release-notes, check-translations ]
    runs-on: [ self-hosted, Windows, desktop-kdrive-with-gui ] #with-gui is required for the build_windows action to unlock the release signing certificate
    outputs:
      kDrive_version: ${{ steps.build-windows-step.outputs.kDrive_version }}
    env:
      KDC_PHYSICAL_AUMID: ${{ secrets.KDC_PHYSICAL_AUMID }}
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build Windows
        id: build-windows-step
        uses: ./.github/actions/build_windows
        with:  
          physical_cert: ${{ secrets.WINDOWS_PHYSICAL_CERT }}
          physical_cert_pass: ${{ secrets.WINDOWS_PHYSICAL_CERT_PASSWORD }}
          release_build: true

  build-Linux-amd:
    needs: [ check-release-notes, check-translations ]
    runs-on: [ self-hosted, Linux, X64, desktop-kdrive ]
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build Linux
        uses: ./.github/actions/build_linux_amd
        with:
          release_build: true

  build-Linux-arm:
    needs: [ check-release-notes, check-translations ]
    runs-on: [ self-hosted, macOS, ARM64, desktop-kdrive ]
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build Linux
        uses: ./.github/actions/build_linux_arm
        with:
          release_build: true

  build-MacOS:
    needs: [ check-release-notes, check-translations ]
    runs-on: [ self-hosted, macOS, desktop-kdrive ]
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build macOS
        uses: ./.github/actions/build_macos
        with:  
          keychain_password: ${{ secrets.KEYCHAIN_PASSWORD }}
          release_build: true    
          release_build_altool_username: ${{ secrets.ALTOOL_USERNAME }}

# Tests Windows
  test-Windows:
    if: ${{ github.event.inputs.skip_tests == 'false' }}
    needs: build-Windows
    strategy:
      fail-fast: false
      matrix:
        test_name: ["kDrive_test_common", "kDrive_test_common_server", "kDrive_test_server", "kDrive_test_syncengine", "kDrive_test_parms"]
    runs-on: [ self-hosted, Windows ]
    env:
      KDRIVE_TEST_CI_LOCAL_PATH: "${{ github.workspace }}/test/test_ci"
      KDRIVE_SENTRY_ENVIRONMENT: "windows_ci_runner"
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.head_ref }}

      - name: Run test
        uses: ./.github/actions/test_windows
        with:
           test_name: ${{ matrix.test_name }}
           test_dependencies_version: ${{ vars.KDRIVE_TEST_DEPENDENCIES_VERSION }}
# Tests Linux
  test-Linux:
    if: ${{ github.event.inputs.skip_tests == 'false' }}
    needs: [build-Linux-amd, build-Linux-arm]
    strategy:
      fail-fast: false
      matrix:
        test_name: ["kDrive_test_common", "kDrive_test_common_server", "kDrive_test_server", "kDrive_test_syncengine", "kDrive_test_parms"]
    runs-on: [ self-hosted, Linux, X64 ]
    env:
      KDRIVE_TEST_CI_LOCAL_PATH: "${{ github.workspace }}/test/test_ci"
      KDRIVE_SENTRY_ENVIRONMENT: "linux_ci_runner"
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.head_ref }}

      - name: Run test
        uses: ./.github/actions/test_linux
        with:
          test_name: ${{ matrix.test_name }}
          test_dependencies_version: ${{ vars.KDRIVE_TEST_DEPENDENCIES_VERSION }}

# Tests macOS
  test-macOS:
    if: ${{ github.event.inputs.skip_tests == 'false' }}
    needs: build-MacOS
    strategy:
      fail-fast: false
      matrix:
        test_name: ["kDrive_test_common", "kDrive_test_common_server", "kDrive_test_server", "kDrive_test_syncengine", "kDrive_test_parms"]
    runs-on: [ self-hosted, macOS ]
    env:
      KDRIVE_TEST_CI_LOCAL_PATH: "${{ github.workspace }}/test/test_ci"
      KDRIVE_SENTRY_ENVIRONMENT: "macos_ci_runner"
    steps:
       - name: Checkout the PR
         uses: actions/checkout@v4.1.1
         with:
          ref: ${{ github.head_ref }}

       - name: Run test
         uses: ./.github/actions/test_macos
         with:  
            test_name: ${{ matrix.test_name }}
            test_dependencies_version: ${{ vars.KDRIVE_TEST_DEPENDENCIES_VERSION }}

# Upload the installer and sentry artifacts
  upload-to-kDrive-and-sentry:
    needs: [test-Linux, test-Windows, test-macOS]
    runs-on: [self-hosted, Windows, desktop-kdrive-with-gui] # Could be runing on any windows runner, but we use 'desktop-kdrive-with-gui' to avoid monopolizing the runners that are used for the CI builds.
    env:
        KDRIVE_TOKEN: ${{ secrets.KDRIVE_TOKEN }}
        KDRIVE_ID: ${{ secrets.KDRIVE_ID }}
        KDRIVE_DIR_ID: ${{ secrets.KDRIVE_DIR_ID }}
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.head_ref }}

      - name: Get kDrive version
        id: get-version
        uses: ./.github/actions/get_version

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-windows
          pattern: win-release-artifacts-*
          merge-multiple: true

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-macos
          pattern: macos-release-artifacts-*
          merge-multiple: true

      - name: Download Linux ARM64 artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-linux-arm64
          pattern: linux-release-artifacts-*-arm64
          merge-multiple: true

      - name: Download Linux AMD64 artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-linux-amd64
          pattern: linux-release-artifacts-*-amd64
          merge-multiple: true

      - name: Upload debug files and installers/appimage to kDrive
        run: powershell ./infomaniak-build-tools/upload-release-to-kDrive.ps1 -version "${{ steps.get-version.outputs.kDrive_version }}"

      - name: Download sentry-cli and login
        run: |
          Invoke-WebRequest -Uri https://github.com/getsentry/sentry-cli/releases/download/2.46.0/sentry-cli-Windows-x86_64.exe -OutFile sentry-cli.exe
          .\sentry-cli.exe login --auth-token ${{ secrets.SENTRY_AUTH_TOKEN }}
        shell: powershell

      - name : Upload sentry artifacts - Windows
        run: |
          .\sentry-cli.exe debug-files upload --project kdrive-server .\build-windows\kDrive.pdb
          .\sentry-cli.exe debug-files upload --project kdrive-client .\build-windows\kDrive_client.pdb
          .\sentry-cli.exe debug-files upload --project kdrive-server --type sourcebundle .\build-windows\kDrive.src.zip
          .\sentry-cli.exe debug-files upload --project kdrive-client --type sourcebundle .\build-windows\kDrive_client.src.zip
        shell: powershell

      - name: Upload sentry artifacts - Linux
        run: |
          .\sentry-cli.exe debug-files upload --project kdrive-server .\build-linux\kDrive.dbg
          .\sentry-cli.exe debug-files upload --project kdrive-client .\build-linux\kDrive_client.dbg
          .\sentry-cli.exe debug-files upload --project kdrive-server --type sourcebundle .\build-linux\kDrive.src.zip
          .\sentry-cli.exe debug-files upload --project kdrive-client --type sourcebundle .\build-linux\kDrive_client.src.zip
        shell: powershell

      - name: Upload sentry artifacts - macOS
        run: |
          .\sentry-cli.exe debug-files upload --project kdrive-server .\build-macos\kDrive.dSYM
          .\sentry-cli.exe debug-files upload --project kdrive-client .\build-macos\kDrive_client.dSYM
          .\sentry-cli.exe debug-files upload --project kdrive-server --type sourcebundle .\build-macos\kDrive.src.zip
          .\sentry-cli.exe debug-files upload --project kdrive-client --type sourcebundle .\build-macos\kDrive_client.src.zip
        shell: powershell
