name: Nightly tests kDrive desktop - All OS 

on:
    # Allows manual execution
    workflow_dispatch:  
    # Runs every day at midnight
    schedule:
        - cron: '0 0 * * *'
    # Runs on every push to a release branch
    push:
        branches:
            - release/*
  
env:
  KDRIVE_TEST_CI_API_TOKEN: ${{ secrets.KDRIVE_TOKEN }}
  KDRIVE_TEST_CI_ACCOUNT_ID: ${{ vars.KDRIVE_TEST_CI_ACCOUNT_ID }}
  KDRIVE_TEST_CI_USER_ID: ${{ vars.KDRIVE_TEST_CI_USER_ID }}
  KDRIVE_TEST_CI_DRIVE_ID: ${{ vars.KDRIVE_TEST_CI_DRIVE_ID }}
  KDRIVE_TEST_CI_REMOTE_DIR_ID: ${{ vars.KDRIVE_TEST_CI_REMOTE_DIR_ID }}
  KDRIVE_TEST_CI_LOCAL_PATH: ${{ vars.KDRIVE_TEST_CI_LOCAL_PATH }}
  KDRIVE_TEST_CI_REMOTE_PATH: ${{ vars.KDRIVE_TEST_CI_REMOTE_PATH }}
  KDRIVE_TEST_CI_RUNNING_ON_CI: true
  KDRIVE_TEST_CI_NIGHTLY : true

jobs:
  Windows:
    runs-on: [ self-hosted, Windows, desktop-kdrive ]
    env:
      KDRIVE_TEST_CI_8MO_PARTITION_PATH: ${{ vars.KDRIVE_TEST_CI_8MO_PARTITION_PATH_WIN }}
    steps:
      - name: Load system Path into Github environment
        run : echo Path=%Path%>> %GITHUB_ENV%
        shell: cmd

      - name: Checkout the PR
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || 'KDESKTOP-1066-Activate-integration-test-with-a-CI-nightly' }}
          submodules: recursive
        
      - name: Clean the log directory
        run : rm -r -force C:/Windows/Temp/kDrive-logdir/*

      - name: Restore extension packages
        run : nuget restore extensions/windows/cfapi/kDriveExt.sln

      - name: Import Windows virtual certificate
        env:
          WINDOWS_VIRTUAL_CERT: ${{ secrets.WINDOWS_VIRTUAL_CERT }}
          WINDOWS_VIRTUAL_CERT_PASSWORD: ${{ secrets.WINDOWS_VIRTUAL_CERT_PASSWORD }}
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_VIRTUAL_CERT
          certutil -decode certificate/tempCert.txt certificate/certificate.pfx
          Remove-Item -path certificate -include tempCert.txt
          Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_VIRTUAL_CERT_PASSWORD -Force -AsPlainText)

      - name: Build kDrive desktop
        run: |
          call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build/vcvars64.bat"
          set COVFILE=%cd%\src\test.cov  
          call "cov01.exe" -1

          powershell ./infomaniak-build-tools/windows/build-drive.ps1 -ci
        shell: cmd

      - name: Execute tests
        run: |
          ./infomaniak-build-tools/run-tests.ps1

      - name: Install sonar-scanner
        if: false
        uses: SonarSource/sonarcloud-github-c-cpp@v3
        env:
          SONAR_HOST_URL: https://sonarcloud.io

      - name: Run sonar-scanner
        if: false
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SONAR_TOKEN: ${{ secrets.SONAR_DESKTOP_KDRIVE_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        run: >
            sonar-scanner 
            --define sonar.projectKey="Infomaniak_desktop-kDrive"
            --define sonar.organization="infomaniak"
            --define sonar.host.url="https://sonarcloud.io"
            --define sonar.sources="src"
            --define sonar.exclusions="src/3rdparty/**"
            --define sonar.cfamily.compile-commands="build-windows/build/compile_commands.json"

      - name: Upload tests logs artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-tests-logs
          path: C:/Windows/Temp/kDrive-logdir/*
          retention-days: 3
          overwrite: true
        if: always()

      - name: Clean-up generated code
        run : powershell ./infomaniak-build-tools/windows/build-drive.ps1 -clean all

  MacOS:
    runs-on: [ self-hosted, macOS, desktop-kdrive ]
    env:
      KDRIVE_TEST_CI_8MO_PARTITION_PATH: ${{ vars.KDRIVE_TEST_CI_8MO_PARTITION_PATH_MACOS }}
    steps:
      - name: Clean-up XCode DerivedData
        run : rm -rf /Users/runner/Library/Developer/Xcode/DerivedData
        
      - name: Checkout the code
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || 'KDESKTOP-1066-Activate-integration-test-with-a-CI-nightly' }}
          submodules: recursive

      - name: Grant empty trash script execute permission
        run : chmod +x ./infomaniak-build-tools/empty_drive_trash.sh
      - name: Empty drive's trash
        run : ./infomaniak-build-tools/empty_drive_trash.sh

      - name: Unlock keychain to use the certificate
        run : security unlock-keychain -p '${{ secrets.KEYCHAIN_PASSWORD }}' login.keychain

      - name: Grant building script execute permission
        run : chmod +x ./infomaniak-build-tools/macos/build-ci.sh
      - name: Build kDrive desktop
        run : ./infomaniak-build-tools/macos/build-ci.sh

      - name: Grant tests script execute permission
        run : chmod +x ./infomaniak-build-tools/run-tests.sh
      - name: Execute tests
        run : ./infomaniak-build-tools/run-tests.sh

      - name: Get the path to kDrive-logdir
        run : echo "logdir_path="$(find /private/var/folders/ -name kDrive-logdir 2>/dev/null)"" >> $GITHUB_ENV
        if  : success() || failure()

      - name: Upload tests logs artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-tests-logs
          path: ${{ env.logdir_path }}/*
          retention-days: 3
          overwrite: true
        if: contains(env.logdir_path, 'kDrive-logdir') && (success() || failure())

      - name: Clean the log directory
        if  : contains(env.logdir_path, 'kDrive-logdir')
        run : rm -rf ${{ env.logdir_path }}/*
        continue-on-error: true

      - name: Clean-up generated code
        run : rm -rf build-macos

  Linux:
    runs-on: [ self-hosted, Linux, X64, desktop-kdrive ]
    env:
      KDRIVE_TEST_CI_8MO_PARTITION_PATH: ${{ vars.KDRIVE_TEST_CI_8MO_PARTITION_PATH_LINUX }}
    steps:
      - name: Checkout the PR
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || 'KDESKTOP-1066-Activate-integration-test-with-a-CI-nightly' }}
          submodules: recursive

      - name: Clean the log directory
        run : rm -rf /tmp/kDrive-logdir/*

      - name: Grant building script execute permission
        run : chmod +x ./infomaniak-build-tools/linux/build-ci-amd64.sh
      - name: Build kDrive desktop
        run : ./infomaniak-build-tools/linux/build-ci-amd64.sh -u

      - name: Grant tests script execute permission
        run : chmod +x ./infomaniak-build-tools/run-tests.sh
      - name: Execute tests
        run : ./infomaniak-build-tools/run-tests.sh

      - name: Upload tests logs artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-tests-logs
          path: /tmp/kDrive-logdir/*
          retention-days: 3
          overwrite: true
        if: always()

      - name: Clean-up generated code
        run : rm -rf build-linux

      - name: Grant Notify script execute permission
        run : chmod +x ./infomaniak-build-tools/notify_kchat.sh

  kChat_notification:
    runs-on: [ self-hosted, Linux, X64, desktop-kdrive ]
    env:
      KCHAT_WEBHOOK_URL: ${{ vars.KCHAT_WEBHOOK_URL }}
    needs: [ Windows, MacOS, Linux ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || 'KDESKTOP-1066-Activate-integration-test-with-a-CI-nightly' }}
  
      - name: Grant Notify script execute permission
        run: chmod +x ./infomaniak-build-tools/notify_kchat.sh

      - name: Notify kChat (Success or Failure)
        run: |
          # If any of the needed jobs failed, prefix the message with @desktop-dev
          MESSAGE="[![Nightly tests kDrive desktop - All OS](https://github.com/Infomaniak/desktop-kDrive/actions/workflows/nightly-all.yml/badge.svg)](https://github.com/Infomaniak/desktop-kDrive/actions/workflows/nightly-all.yml)"
        
          if [[ "${{ needs.Windows.result }}" == "failure" || "${{ needs.MacOS.result }}" == "failure" || "${{ needs.Linux.result }}" == "failure" ]]; then
            MESSAGE="@desktop-dev $MESSAGE"
          fi
        
          # Call the notify_kchat.sh script with the message
          ./infomaniak-build-tools/notify_kchat.sh "$MESSAGE"

