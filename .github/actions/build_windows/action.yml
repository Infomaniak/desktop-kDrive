name: Build Windows
description: 'Build windows app'

inputs:
  virtual_cert:
    description: 'The virtual certificate, mandatory for non-release builds'
    required: false
  virtual_cert_pass:
    description: 'Password of the virtual certificate, mandatory for non-release builds'
    required: false
  physical_cert:
    description: 'The physical certificate, mandatory for release builds'
    required: false
  physical_cert_pass:
    description: 'Password of the physical certificate, mandatory for release builds'
    required: false
  release_build:
    description: 'If true, run the release build script'
    required: false
    default: 'false'
    
outputs:
  kDrive_version:
    description: 'The version of the kDrive app built'
    value: ${{ steps.set_version.outputs.kDrive_version }}

runs:
    using: "composite"
    steps:
      
      - name: Load system Path into Github environment
        run : echo Path=%Path%>> %GITHUB_ENV%
        shell: cmd

      - name: Restore extension packages
        run : nuget restore extensions/windows/cfapi/kDriveExt.sln
        shell: powershell

      - name: Import Windows certificate
        env:
          WINDOWS_VIRTUAL_CERT:  ${{ inputs.virtual_cert }}
          WINDOWS_PHYSICAL_CERT: ${{ inputs.physical_cert }}
        run: |
          if("${{ inputs.release_build }}" -eq "true") {
            New-Item -ItemType directory -Path certificate
            Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_PHYSICAL_CERT
            certutil -decode certificate/tempCert.txt certificate/certificate.cert
            Remove-Item -path certificate -include tempCert.txt
            Import-Certificate -Filepath certificate/certificate.cert -CertStoreLocation Cert:\LocalMachine\My
            Write-Host "Physical certificate imported successfully."
            } else {
            New-Item -ItemType directory -Path certificate
            Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_VIRTUAL_CERT
            certutil -decode certificate/tempCert.txt certificate/certificate.pfx
            Remove-Item -path certificate -include tempCert.txt
            Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\LocalMachine\My -Password (ConvertTo-SecureString -String "${{ inputs.virtual_cert_pass }}" -Force -AsPlainText)
            Write-Host "Virtual certificate imported successfully."
            }
        shell: powershell

      - name: Build kDrive desktop
        id: build
        run: |
          call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build/vcvars64.bat"
          if "${{ inputs.release_build }}" == "true" (
            powershell certutil -scinfo -Silent
            powershell ./infomaniak-build-tools/windows/build-drive.ps1 -ci -ext -clean remake -upload -tokenPass ${{ inputs.physical_cert_pass }}
            ) else (
            powershell ./infomaniak-build-tools/windows/build-drive.ps1 -ci
            )
        shell: cmd

      - name: Set version output
        id: set_version
        run: |
            $version = (Select-String -Path .\build-windows\build\version.h KDRIVE_VERSION_FULL | foreach-object { $data = $_ -split " "; echo $data[3]})
            "kDrive_version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "kDrive version: $version built successfully :rocket:" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
        shell: powershell

      - name: Fetch dependencies
        run: |
          mkdir dependencies
          cp "${{ github.workspace }}/build-windows/install/bin/*.dll" ./dependencies/
          cp "${{ github.workspace }}/build-windows/install/bin/sync-exclude.lst" ./dependencies/
          cp "${{ github.workspace }}/build-windows/install/bin/*.dll" ./dependencies/
          cp "C:\Qt\6.2.3\msvc2019_64\bin\Qt6Widgets.dll" ./dependencies/
          cp "C:\Qt\6.2.3\msvc2019_64\bin\Qt6Gui.dll" ./dependencies/
          cp "C:\Qt\6.2.3\msvc2019_64\bin\Qt6Network.dll" ./dependencies/
          cp "C:\Qt\6.2.3\msvc2019_64\bin\Qt6Sql.dll" ./dependencies/
          cp "C:\Qt\6.2.3\msvc2019_64\bin\Qt6Core.dll" ./dependencies/
          cp "C:\Qt\6.2.3\msvc2019_64\bin\Qt6DBus.dll" ./dependencies/
          cp "C:\Qt\6.2.3\msvc2019_64\bin\Qt6Svg.dll" ./dependencies/
          cp "C:\Program Files (x86)\Sentry-Native\bin\crashpad_handler.exe" ./dependencies/
          mkdir .\dependencies\platforms
          cp "C:\Qt\6.2.3\msvc2019_64\plugins\platforms\qoffscreen.dll" .\dependencies\platforms
          cp "C:\Program Files (x86)\cppunit\lib\cppunit_dll.dll" ./dependencies/
        shell: powershell
        if: steps.build.outcome == 'success'

      - name: Fetch Conan dependencies (Windows)
        if: steps.build.outcome == 'success'
        shell: powershell
        run: |
          $conanRunBat = Get-ChildItem -Path "${{ github.workspace }}" -Recurse -Filter "conanrun.bat" | Select-Object -First 1
          
          if ($conanRunBat) {
            Write-Host "Sourcing $($conanRunBat.FullName)"
            cmd /c `"$($conanRunBat.FullName)`"  # modifie l'environnement du shell cmd
          }
          
          $patterns = @("libxxhash*.dll", "liblog4cplus*.dll", "libssl*.dll", "libcrypto*.dll")
          $paths = $env:PATH -split ';' | Where-Object { $_ -like '*\.conan2\p*' }
          foreach ($dir in $paths) {
            if (Test-Path $dir) {
              Write-Host "Looking in $dir"
              foreach ($pattern in $patterns) {
                Get-ChildItem -Path $dir -Recurse -Filter $pattern -ErrorAction SilentlyContinue | ForEach-Object {
                  Copy-Item -Path $_.FullName -Destination ./dependencies/ -Force
                  Write-Host "Conan dependency found -> $($_.FullName)"
                }
              }
            }
          }
      - name: Upload build common files
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-common-files
          path: |
              ./dependencies/*
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success'

      - name: Upload build test common executable
        uses: actions/upload-artifact@v4
        with:
          name: win-kDrive_test_common
          path: ${{ github.workspace }}/build-windows/build/bin/kDrive_test_common.exe
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success'

      - name: Upload build test common server executable
        uses: actions/upload-artifact@v4
        with:
          name: win-kDrive_test_common_server
          path: ${{ github.workspace }}/build-windows/build/bin/kDrive_test_common_server.exe
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success'

      - name: Upload build test server executable
        uses: actions/upload-artifact@v4
        with:
          name: win-kDrive_test_server
          path: ${{ github.workspace }}/build-windows/build/bin/kDrive_test_server.exe
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success'

      - name: Upload build test syncengine executable
        uses: actions/upload-artifact@v4
        with:
          name: win-kDrive_test_syncengine
          path: ${{ github.workspace }}/build-windows/build/bin/kDrive_test_syncengine.exe
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success'

      - name: Upload build test parms executable
        uses: actions/upload-artifact@v4
        with:
          name: win-kDrive_test_parms
          path: ${{ github.workspace }}/build-windows/build/bin/kDrive_test_parms.exe
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success'

      - name: Download sentry-cli for Windows
        run: |
          Invoke-WebRequest -Uri https://github.com/getsentry/sentry-cli/releases/download/2.46.0/sentry-cli-Windows-x86_64.exe -OutFile sentry-cli.exe
        shell: powershell
        if: steps.build.outcome == 'success' && ${{ inputs.release_build == 'true' }}

      - name : Create sentry server artifacts
        run: |
          .\sentry-cli debug-files bundle-sources ${{ github.workspace }}/build-windows/build/bin/kDrive.pdb
          mkdir ${{ github.workspace }}/build-windows/sentry-server-artifacts
          Move-Item -Path ${{ github.workspace }}/build-windows/build/bin/kDrive.src.zip -Destination ${{ github.workspace }}/build-windows/sentry-server-artifacts/kDrive.src.zip
          Move-Item -Path ${{ github.workspace }}/build-windows/build/bin/kDrive.pdb -Destination ${{ github.workspace }}/build-windows/sentry-server-artifacts/kDrive.pdb
        shell: powershell
        if: steps.build.outcome == 'success' && ${{ inputs.release_build == 'true' }}

      - name : Create sentry client artifacts
        run: |
          .\sentry-cli debug-files bundle-sources ${{ github.workspace }}/build-windows/build/bin/kDrive_client.pdb
          mkdir ${{ github.workspace }}/build-windows/sentry-client-artifacts
          Move-Item -Path ${{ github.workspace }}/build-windows/build/bin/kDrive_client.src.zip -Destination ${{ github.workspace }}/build-windows/sentry-client-artifacts/kDrive_client.src.zip
          Move-Item -Path ${{ github.workspace }}/build-windows/build/bin/kDrive_client.pdb -Destination ${{ github.workspace }}/build-windows/sentry-client-artifacts/kDrive_client.pdb
        shell: powershell
        if: steps.build.outcome == 'success' && ${{ inputs.release_build == 'true' }}

      - name: Upload sentry server artifacts
        uses: actions/upload-artifact@v4
        with:
          name: win-release-artifacts-server-debug
          path: ${{ github.workspace }}/build-windows/sentry-server-artifacts
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success' && ${{ inputs.release_build == 'true' }}

      - name: Upload sentry client artifacts
        uses: actions/upload-artifact@v4
        with:
          name: win-release-artifacts-client-debug
          path: ${{ github.workspace }}/build-windows/sentry-client-artifacts
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success' && ${{ inputs.release_build == 'true' }}

      - name: Upload app installer
        uses: actions/upload-artifact@v4
        with:
          name: win-release-artifacts-installer
          path: ${{ github.workspace }}\build-windows\kDrive-* # kDrive-x.x.x.yyyymmdd.exe
          retention-days: 1
        if: steps.build.outcome == 'success' && ${{ inputs.release_build == 'true' }}

      - name: Clean-up generated code
        run : powershell ./infomaniak-build-tools/windows/build-drive.ps1 -clean all
        shell: powershell
        