name: Build Windows
description: 'Build windows app'

inputs:
  virtual_cert_id:
    description: 'Id of the virtual certificate'
    required: true
  virtual_cert_pass:
    description: 'Password of the virtual certificate'
    required: true

runs:
    using: "composite"
    steps:
      - name: Load system Path into Github environment
        run : echo Path=%Path%>> %GITHUB_ENV%
        shell: cmd

      - name: Restore extension packages
        run : nuget restore extensions/windows/cfapi/kDriveExt.sln
        shell: powershell

      - name: Import Windows virtual certificate
        env:
          WINDOWS_VIRTUAL_CERT:  ${{ inputs.virtual_cert_id }}
          WINDOWS_VIRTUAL_CERT_PASSWORD: ${{ inputs.virtual_cert_pass }}
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_VIRTUAL_CERT
          certutil -decode certificate/tempCert.txt certificate/certificate.pfx
          Remove-Item -path certificate -include tempCert.txt
          Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_VIRTUAL_CERT_PASSWORD -Force -AsPlainText)
        shell: powershell

      - name: Build kDrive desktop
        id: build
        run: |
          call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build/vcvars64.bat"          
          powershell ./infomaniak-build-tools/windows/build-drive.ps1 -ci
        shell: cmd

      - name: Fetch dependencies
        run: |
          mkdir dependencies
          cp "${{ github.workspace }}/build-windows/install/bin/*.dll" ./dependencies/
          cp "${{ github.workspace }}/build-windows/install/bin/sync-exclude.lst" ./dependencies/
          cp "${{ github.workspace }}/build-windows/install/bin/*.dll" ./dependencies/
          cp "C:\Qt\6.2.3\msvc2019_64\bin\Qt6Widgets.dll" ./dependencies/
          cp "C:\Qt\6.2.3\msvc2019_64\bin\Qt6Gui.dll" ./dependencies/
          cp "C:\Qt\6.2.3\msvc2019_64\bin\Qt6Network.dll" ./dependencies/
          cp "C:\Qt\6.2.3\msvc2019_64\bin\Qt6Sql.dll" ./dependencies/
          cp "C:\Qt\6.2.3\msvc2019_64\bin\Qt6Core.dll" ./dependencies/
          cp "C:\Qt\6.2.3\msvc2019_64\bin\Qt6DBus.dll" ./dependencies/
          cp "C:\Qt\6.2.3\msvc2019_64\bin\Qt6Svg.dll" ./dependencies/
          cp "C:\Program Files (x86)\Sentry-Native\bin\crashpad_handler.exe" ./dependencies/
          mkdir .\dependencies\platforms
          cp "C:\Qt\6.2.3\msvc2019_64\plugins\platforms\qoffscreen.dll" .\dependencies\platforms
          cp "C:\Program Files (x86)\cppunit\lib\cppunit_dll.dll" ./dependencies/
        shell: powershell
        if: steps.build.outcome == 'success'

      - name: Fetch Conan dependencies (Windows)
        if: steps.build.outcome == 'success'
        shell: powershell
        run: |
            $conanPath = "$env:USERPROFILE\.conan2\p"
            Write-Host "Fetching Conan dependencies in $conanPath"
            $patterns = @("libxxhash*.dll", "liblog4cplus*.dll")
            foreach ($pattern in $patterns) {
            Get-ChildItem -Path $conanPath -Recurse -Filter $pattern | ForEach-Object {
                Copy-Item -Path $_.FullName -Destination ./dependencies/ -Force
                Write-Host "Conan dependency found -> $($_.FullName)"
            }
            }
      - name: Upload build common files
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-common-files
          path: |
              ./dependencies/*
          retention-days: 1
        if: steps.build.outcome == 'success'

      - name: Upload build test common executable
        uses: actions/upload-artifact@v4
        with:
          name: win-kDrive_test_common
          path: ${{ github.workspace }}/build-windows/build/bin/kDrive_test_common.exe
          retention-days: 1
        if: steps.build.outcome == 'success'

      - name: Upload build test common server executable
        uses: actions/upload-artifact@v4
        with:
          name: win-kDrive_test_common_server
          path: ${{ github.workspace }}/build-windows/build/bin/kDrive_test_common_server.exe
          retention-days: 1
        if: steps.build.outcome == 'success'

      - name: Upload build test server executable
        uses: actions/upload-artifact@v4
        with:
          name: win-kDrive_test_server
          path: ${{ github.workspace }}/build-windows/build/bin/kDrive_test_server.exe
          retention-days: 1
        if: steps.build.outcome == 'success'

      - name: Upload build test syncengine executable
        uses: actions/upload-artifact@v4
        with:
          name: win-kDrive_test_syncengine
          path: ${{ github.workspace }}/build-windows/build/bin/kDrive_test_syncengine.exe
          retention-days: 1
        if: steps.build.outcome == 'success'

      - name: Upload build test parms executable
        uses: actions/upload-artifact@v4
        with:
          name: win-kDrive_test_parms
          path: ${{ github.workspace }}/build-windows/build/bin/kDrive_test_parms.exe
          retention-days: 1
        if: steps.build.outcome == 'success'

      - name: Clean-up generated code
        run : powershell ./infomaniak-build-tools/windows/build-drive.ps1 -clean all
        shell: powershell
        