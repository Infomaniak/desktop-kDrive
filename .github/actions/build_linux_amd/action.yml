name: Build AMD64 Linux
description: 'Build AMD64 Version of the Linux app'

inputs:
  release_build:
    description: 'If true, run the release build script'
    required: false
    default: 'false'

runs:
    using: "composite"
    steps:
      - name: Clean the log directory
        run : rm -rf /tmp/kDrive-logdir/*
        shell: bash

      - name: Run the build script
        id: build
        run: |
          if [[ "${{ inputs.release_build }}" == "true" ]]; then
            SCRIPT="${{ github.workspace }}/infomaniak-build-tools/linux/build-release-amd64.sh"
            ARGS="-u"
          else
            SCRIPT="${{ github.workspace }}/infomaniak-build-tools/linux/build-ci-amd64.sh"
            ARGS="-u -t release"
          fi
          
          /usr/bin/env bash "$SCRIPT" $ARGS
        shell: bash

      - name: Upload app AppImage
        uses: actions/upload-artifact@v4
        with:
          name: linux-release-artifacts-appimage-amd64
          path: ${{ github.workspace }}/build-linux/install/kDrive-*-amd64.AppImage # kDrive-<full_version>-amd64.AppImage
          retention-days: 1
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'true' }}

      - name: Download sentry-cli for Linux
        if: ${{ steps.build.outcome == 'success' &&  inputs.release_build == 'true' }}
        run: |
          curl -L https://github.com/getsentry/sentry-cli/releases/download/2.46.0/sentry-cli-Linux-x86_64 -o sentry-cli \
          && chmod +x ./sentry-cli
        shell: bash

      - name: Create sentry server artifacts
        if: ${{ steps.build.outcome == 'success' &&  inputs.release_build == 'true' }}
        run: |
          DBG_FILE="${{ github.workspace }}/build-linux/kDrive.dbg"
          ./sentry-cli debug-files bundle-sources "$DBG_FILE"
          mkdir "${{ github.workspace }}/build-linux/sentry-server-artifacts"
          mv "${{ github.workspace }}/build-linux/kDrive.src.zip" "${{ github.workspace }}/build-linux/sentry-server-artifacts"
          mv "$DBG_FILE" "${{ github.workspace }}/build-linux/sentry-server-artifacts"
        shell: bash

      - name: Create sentry client artifacts
        if: ${{ steps.build.outcome == 'success' &&  inputs.release_build == 'true' }}
        run: |
          DBG_FILE="${{ github.workspace }}/build-linux/kDrive_client.dbg"
          ./sentry-cli debug-files bundle-sources "$DBG_FILE"
          mkdir "${{ github.workspace }}/build-linux/sentry-client-artifacts"
          mv "${{ github.workspace }}/build-linux/kDrive_client.src.zip" "${{ github.workspace }}/build-linux/sentry-client-artifacts"
          mv "$DBG_FILE" "${{ github.workspace }}/build-linux/sentry-client-artifacts"
        shell: bash

      - name: Upload sentry server artifacts
        if: ${{ steps.build.outcome == 'success' &&  inputs.release_build == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: linux-release-artifacts-server-debug-amd64
          path: ${{ github.workspace }}/build-linux/sentry-server-artifacts
          retention-days: 1
          compression-level: 0

      - name: Upload sentry client artifacts
        if: ${{ steps.build.outcome == 'success' &&  inputs.release_build == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: linux-release-artifacts-client-debug-amd64
          path: ${{ github.workspace }}/build-linux/sentry-client-artifacts
          retention-days: 1
          compression-level: 0

      - name: Fetch dependencies
        run: |
          mkdir -p dependencies/platforms
          qt_dir="/home/runner/Qt/6.2.3/gcc_64/lib"
          local_lib="/usr/local/lib"
          lib_x86_64="/usr/lib/x86_64-linux-gnu"
          
          deps_patterns=(
            "$qt_dir/libQt6Widgets.so.6.2.3"
            "$qt_dir/libQt6Gui.so.6.2.3"
            "$qt_dir/libQt6Network.so.6.2.3"
            "$qt_dir/libQt6Sql.so.6.2.3"
            "$qt_dir/libQt6Core.so.6.2.3"
            "$qt_dir/libQt6DBus.so.6.2.3"
            "$qt_dir/libQt6Svg.so.6.2.3"
          
            "$qt_dir/libicui18n.so.56.1"
            "$qt_dir/libicuuc.so.56.1"
            "$qt_dir/libicudata.so.56.1"
          
            "$local_lib/libcppunit-1.15.so.2"
            "$local_lib/libPocoUtil.so.103"
            "$local_lib/libPocoJSON.so.103"
            "$local_lib/libPocoXML.so.103"
            "$local_lib/libPocoFoundation.so.103"
            "$local_lib/libPocoNetSSL.so.103"
            "$local_lib/libPocoCrypto.so.103"
            "$local_lib/libPocoNet.so.103"
          
            "$local_lib/libsentry.so"
            "$local_lib/libzip.5.5"
          
            "$lib_x86_64/libglib-2.0.so.0.7200.4"
            "$lib_x86_64/libsecret-1.so.0.0.0"
            "$lib_x86_64/libgthread-2.0.so.0.7200.4"
            "$lib_x86_64/libdbus-1.so.3"
          )
          
          for pattern in "${deps_patterns[@]}"; do
            cp "$file" ./dependencies/
          done
          cp /home/runner/Qt/6.2.3/gcc_64/plugins/platforms/libqoffscreen.so ./dependencies/platforms/
        shell: bash
        if: steps.build.outcome == 'success'

      - name: Fetch Conan dependencies
        run: |
          echo "Sourcing conanrun.sh to get LD_LIBRARY_PATH..."
          source $(find "${{ github.workspace }}/build-linux" -name conanrun.sh | head -n 1)
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
          IFS=':' read -ra dirs <<< "$LD_LIBRARY_PATH"
          for dir in "${dirs[@]}"; do
            if [[ "$dir" == *".conan2/p"* ]]; then
              echo "Looking in $dir"
              find "$dir" \
                \( -iname 'libxxhash.so.0.8.2' \
                -o -iname 'liblog4cplus.so.9' \
                -o -iname 'libssl.so.3' \
                -o -iname 'libcrypto.so.3' \) \
                -exec cp -a {} ./dependencies/ \; \
                -exec echo "Conan dependency found -> " {} \;
            fi
          done
        shell: bash
        if: steps.build.outcome == 'success'

      - name: Fetch kDrive dependencies (.lst)
        run: | 
          mkdir uncached_dependencies
          cp ${{ github.workspace }}/build-linux/build/bin/sync-exclude.lst ./uncached_dependencies/
        shell: bash
        if: steps.build.outcome == 'success'

      - name: Upload build common files
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-common-files
          path: ./dependencies/
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success'

      - name: Upload uncached build common files
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-common-files-uncached
          path: ./uncached_dependencies/
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success'

      - name: Upload build test common executable
        uses: actions/upload-artifact@v4
        with:
          name: linux-kDrive_test_common
          path: ${{ github.workspace }}/build-linux/build/bin/kDrive_test_common
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success'

      - name: Upload build test common server executable
        uses: actions/upload-artifact@v4
        with:
          name: linux-kDrive_test_common_server
          path: ${{ github.workspace }}/build-linux/build/bin/kDrive_test_common_server
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success'

      - name: Upload build test server executable
        uses: actions/upload-artifact@v4
        with:
          name: linux-kDrive_test_server
          path: ${{ github.workspace }}/build-linux/build/bin/kDrive_test_server
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success'

      - name: Upload build test syncengine executable
        uses: actions/upload-artifact@v4
        with:
          name: linux-kDrive_test_syncengine
          path: ${{ github.workspace }}/build-linux/build/bin/kDrive_test_syncengine
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success'

      - name: Upload build test parms executable
        uses: actions/upload-artifact@v4
        with:
          name: linux-kDrive_test_parms
          path: ${{ github.workspace }}/build-linux/build/bin/kDrive_test_parms
          retention-days: 1
          compression-level: 0
        if: steps.build.outcome == 'success'

      - name: Clean-up generated code
        run : rm -rf build-linux
        shell: bash
