name: Build macOS
description: 'Build macOS app'

inputs:
  keychain_password:
    description: 'The password of the keychain'
    required: true
  release_build:
    description: 'If true, run the release build script'
    required: false
    default: 'false'
  release_build_altool_username:
    description: 'Username for altool upload'
    required: false
    default: ''

runs:
    using: "composite"
    steps:
      - name: Clean-up XCode DerivedData
        run : rm -rf /Users/runner/Library/Developer/Xcode/DerivedData
        shell: bash

      - name: Grant empty trash script execute permission
        run : chmod +x ./infomaniak-build-tools/empty_drive_trash.sh
        shell: bash

      - name: Empty drive's trash
        run : ./infomaniak-build-tools/empty_drive_trash.sh
        shell: bash

      - name: Unlock keychain to use the certificate
        run : security unlock-keychain -p '${{ inputs.keychain_password }}' login.keychain
        shell: bash

      - name: Grant building script execute permission
        run : |
            if [ "${{ inputs.release_build }}" = "true" ]; then
                chmod +x ./infomaniak-build-tools/macos/build-release.sh
            else
                chmod +x ./infomaniak-build-tools/macos/build-ci.sh
            fi
        shell: bash

      - name: Build kDrive desktop
        id: build
        run : |
            export ALTOOL_USERNAME="${{ inputs.release_build_altool_username }}"
            if [ "${{ inputs.release_build }}" = "true" ]; then
                ./infomaniak-build-tools/macos/build-release.sh
            else
                ./infomaniak-build-tools/macos/build-ci.sh
            fi
        shell: bash

      - name: Fetch dependencies
        run: |
          mkdir dependencies
          cp -R ${{ github.workspace }}/build-macos/client/install/kDrive.app/Contents/Frameworks/QtWidgets.framework ./dependencies/
          cp -R ${{ github.workspace }}/build-macos/client/install/kDrive.app/Contents/Frameworks/QtGui.framework ./dependencies/
          cp -R ${{ github.workspace }}/build-macos/client/install/kDrive.app/Contents/Frameworks/QtNetwork.framework ./dependencies/
          cp -R ${{ github.workspace }}/build-macos/client/install/kDrive.app/Contents/Frameworks/QtSql.framework ./dependencies/
          cp -R ${{ github.workspace }}/build-macos/client/install/kDrive.app/Contents/Frameworks/QtCore.framework ./dependencies/
          cp -R ${{ github.workspace }}/build-macos/client/install/kDrive.app/Contents/Frameworks/QtSvg.framework ./dependencies/
          cp -R ${{ github.workspace }}/build-macos/client/install/kDrive.app/Contents/Frameworks/QtDBus.framework ./dependencies/
          cp -R ${{ github.workspace }}/build-macos/client/install/kDrive.app/Contents/Frameworks/Sparkle.framework ./dependencies/
          mkdir dependencies/platforms
          cp /Users/runner/Qt/6.2.3/macos/plugins/platforms/libqoffscreen.dylib ./dependencies/platforms/
          cp /usr/local/lib/libPocoNetSSL.103.dylib ./dependencies/
          cp /usr/local/lib/libPocoUtil.103.dylib ./dependencies/
          cp /usr/local/lib/libPocoJSON.103.dylib ./dependencies/
          cp /usr/local/lib/libPocoXML.103.dylib ./dependencies/
          cp /usr/local/lib/libPocoFoundation.103.dylib ./dependencies/
          cp /usr/local/lib/libPocoNet.103.dylib ./dependencies/
          cp /usr/local/lib/libPocoCrypto.103.dylib ./dependencies/
          cp /usr/local/lib/libcppunit-1.15.2.dylib ./dependencies/
          cp /usr/local/lib/libsentry.dylib ./dependencies/
          cp /usr/local/lib/libzip.5.dylib ./dependencies/
          cp /usr/local/lib/libzstd.1.dylib ./dependencies/
          cp ${{ github.workspace }}/build-macos/client/bin/crashpad_handler ./dependencies/
          # kDrivecommonserver_vfs_mac lib is not cached and therefore is uploaded as a separate artifact
          find "${{ github.workspace }}/build-macos/client/bin" -name "*.dylib" \
            -not -name "kDrivecommonserver_vfs_mac.dylib" \
            -exec cp {} ./dependencies/ \;
        shell: bash
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'false' }} # Only copy dependencies for debug builds, release builds will have them in the app bundle

      - name: Fetch Conan dependencies
        run: |
          echo "Sourcing conanrun.sh to get DYLD_LIBRARY_PATH..."
          source $(find "${{ github.workspace }}/build-macos" -name conanrun.sh | head -n 1)
          echo "DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH"
          
          IFS=':' read -ra dirs <<< "$DYLD_LIBRARY_PATH"
          for dir in "${dirs[@]}"; do
            if [[ "$dir" == *".conan2/p"* ]]; then
              echo "Looking in $dir"
              find "$dir" \
                  '(' -iname 'libxxhash.0.dylib' \
                   -o -iname 'liblog4cplus*.dylib' \
                   -o -iname 'libssl*.dylib' \
                   -o -iname 'libcrypto*.dylib' ')' \
                -exec cp {} ./dependencies/ \; \
                -exec echo "Conan dependency found -> " {} \;
            fi
          done
        shell: bash
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'false' }}

      - name: Fetch kDrive dependencies (lst and vfs lib)
        run: |
          mkdir uncached_dependencies
          if [ "${{ inputs.release_build }}" = "true" ]; then
                cp ${{ github.workspace }}/build-macos/client/install/kDrive.app/Contents/Resources/*.lst ./uncached_dependencies/
          else
                cp ${{ github.workspace }}/build-macos/client/bin/*.lst ./uncached_dependencies/
          fi

          cp ${{ github.workspace }}/build-macos/client/bin/kDrivecommonserver_vfs_mac.dylib ./uncached_dependencies/
          
        shell: bash
        if: ${{ steps.build.outcome == 'success' }}

      - name: Download sentry-cli for macOS
        run: curl -sL https://sentry.io/get-cli/ | sh || true
        shell: bash
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'true' }}

      - name : Create sentry server artifacts
        run: |
          sentry-cli debug-files bundle-sources ${{ github.workspace }}/build-macos/client/install/kDrive.dSYM
          mkdir ${{ github.workspace }}/build-macos/sentry-server-artifacts
          cp -r ${{ github.workspace }}/build-macos/client/install/kDrive.dSYM ${{ github.workspace }}/build-macos/sentry-server-artifacts/kDrive.dSYM
          cp ${{ github.workspace }}/build-macos/client/install/kDrive.src.zip ${{ github.workspace }}/build-macos/sentry-server-artifacts/kDrive.src.zip
        shell: bash
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'true' }}

      - name : Create sentry client artifacts
        run: |
          sentry-cli debug-files bundle-sources ${{ github.workspace }}/build-macos/client/install/kDrive_client.dSYM
          mkdir ${{ github.workspace }}/build-macos/sentry-client-artifacts
          cp -r ${{ github.workspace }}/build-macos/client/install/kDrive.dSYM ${{ github.workspace }}/build-macos/sentry-client-artifacts/kDrive_client.dSYM
          cp ${{ github.workspace }}/build-macos/client/install/kDrive_client.src.zip ${{ github.workspace }}/build-macos/sentry-client-artifacts/kDrive_client.src.zip
        shell: bash
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'true' }}

      - name: Get kDrive version
        id: get-version
        uses: ./.github/actions/get_version
        if: steps.build.outcome == 'success'

      - name: Generate Sparkle artifacts
        run: |
          mkdir -p ${{ github.workspace }}/build-macos/client/install/sparkle
          /usr/bin/ditto -c -k --sequesterRsrc --keepParent "${{ github.workspace }}/build-macos/client/install/kDrive.app" ${{ github.workspace }}/build-macos/client/install/sparkle/kDrive-${{ steps.get-version.outputs.kDrive_version }}.zip
          $HOME/Sparkle/bin/generate_appcast ${{ github.workspace }}/build-macos/client/install/sparkle
          sed -e 's/www.infomaniak.com\/drive\/update/download.storage.infomaniak.com\/drive\/desktopclient/' \
              -e 's/sparkle:releaseNotesLink/sparkle:releaseNotesLink xml:lang="en"/' \
              "${{ github.workspace }}/build-macos/client/install/sparkle/desktopclient" > "${{ github.workspace }}/build-macos/client/install/sparkle/update-macos-${{ steps.get-version.outputs.kDrive_version }}.xml"
          python3 -m venv "${{ github.workspace }}/infomaniak-build-tools/macos/venv"
          source "${{ github.workspace }}/infomaniak-build-tools/macos/venv/bin/activate"
          pip3 install bs4 lxml || true
          python3 "${{ github.workspace }}/infomaniak-build-tools/macos/insert_xml.py" "${{ github.workspace }}/build-macos/client/install/sparkle/update-macos-${{ steps.get-version.outputs.kDrive_version }}.xml" "kDrive-${{ steps.get-version.outputs.kDrive_version }}"
          if [ ! "$?" -eq "0" ]; then
            echo "The insertion of the release notes links in the auto-update file failed."
            echo "Check that your python3 virtual environment is activated and that bs4 and lxml are installed." 
            deactivate
            rm -rf "${{ github.workspace }}/infomaniak-build-tools/macos/venv"
            exit 1
          fi
          deactivate
          rm -rf "${{ github.workspace }}/infomaniak-build-tools/macos/venv"
        shell: bash
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'true' }}

      - name: Upload build common files
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-common-files
          path: ./dependencies
          retention-days: 1
          compression-level: 0
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'false' }}

      - name: Upload uncached build common files
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-common-files-uncached
          path: ./uncached_dependencies
          retention-days: 1
        if: ${{ steps.build.outcome == 'success' }}

      - name: Upload build test common executable
        uses: actions/upload-artifact@v4
        with:
          name: macos-kDrive_test_common
          path: ${{ github.workspace }}/build-macos/client/bin/kDrive_test_common
          retention-days: 1
          compression-level: 0
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'false' }}

      - name: Upload build test common server executable
        uses: actions/upload-artifact@v4
        with:
          name: macos-kDrive_test_common_server
          path: ${{ github.workspace }}/build-macos/client/bin/kDrive_test_common_server
          retention-days: 1
          compression-level: 0
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'false' }}

      - name: Upload build test server executable
        uses: actions/upload-artifact@v4
        with:
          name: macos-kDrive_test_server
          path: ${{ github.workspace }}/build-macos/client/bin/kDrive_test_server
          retention-days: 1
          compression-level: 0
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'false' }}

      - name: Upload build test syncengine executable
        uses: actions/upload-artifact@v4
        with:
          name: macos-kDrive_test_syncengine
          path: ${{ github.workspace }}/build-macos/client/bin/kDrive_test_syncengine
          retention-days: 1
          compression-level: 0
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'false' }}

      - name: Upload build test parms executable
        uses: actions/upload-artifact@v4
        with:
          name: macos-kDrive_test_parms
          path: ${{ github.workspace }}/build-macos/client/bin/kDrive_test_parms
          retention-days: 1
          compression-level: 0
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'false' }}

      - name: Upload sentry server artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-release-artifacts-server-debug
          path: ${{ github.workspace }}/build-macos/sentry-server-artifacts
          retention-days: 1
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'true' }}

      - name: Upload sentry client artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-release-artifacts-client-debug
          path: ${{ github.workspace }}/build-macos/sentry-client-artifacts
          retention-days: 1
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'true' }}


      - name: Upload kDrive Package
        uses: actions/upload-artifact@v4
        with:
          name: macos-release-artifacts-package
          path: ${{ github.workspace }}/build-macos/client/install/*.pkg
          retention-days: 1
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'true' }}

      - name: Upload Sparkle artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-release-artifacts-sparkle
          path: ${{ github.workspace }}/build-macos/client/install/sparkle/
          retention-days: 1
        if: ${{ steps.build.outcome == 'success' && inputs.release_build == 'true' }}

      - name: Clean-up generated code
        run : rm -rf build-macos
        shell: bash

