/*
 * Infomaniak kDrive - Desktop
 * Copyright (C) 2023-2024 Infomaniak Network SA
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <QColor>
#include <QDataStream>
#include <QIODevice>

#define COMM_SHORT_TIMEOUT 1000
#define COMM_AVERAGE_TIMEOUT 10000
#define COMM_LONG_TIMEOUT 60000

#define MSG_TYPE "type"

#define MSG_REQUEST_ID "id"
#define MSG_REQUEST_NUM "num"
#define MSG_REQUEST_PARAMS "params"

#define MSG_REPLY_ID "id"
#define MSG_REPLY_RESULT "result"

#define MSG_SIGNAL_ID "id"
#define MSG_SIGNAL_NUM "num"
#define MSG_SIGNAL_PARAMS "params"

#define EXECUTE_ERROR_MSG "C/S function call timeout or error!"

typedef enum { REQUEST = 0, REPLY, SIGNAL } MsgType;

typedef enum {
    REQUEST_NUM_LOGIN_REQUESTTOKEN = 1,
    REQUEST_NUM_USER_DBIDLIST,
    REQUEST_NUM_USER_INFOLIST,
    REQUEST_NUM_USER_DELETE,
    REQUEST_NUM_USER_AVAILABLEDRIVES,
    REQUEST_NUM_USER_ID_FROM_USERDBID,
    REQUEST_NUM_ACCOUNT_INFOLIST,
    REQUEST_NUM_DRIVE_INFOLIST,
    REQUEST_NUM_DRIVE_INFO,
    REQUEST_NUM_DRIVE_ID_FROM_DRIVEDBID,
    REQUEST_NUM_DRIVE_ID_FROM_SYNCDBID,
    REQUEST_NUM_DRIVE_DEFAULTCOLOR,
    REQUEST_NUM_DRIVE_UPDATE,
    REQUEST_NUM_DRIVE_DELETE,
    REQUEST_NUM_SYNC_INFOLIST,
    REQUEST_NUM_SYNC_START,
    REQUEST_NUM_SYNC_STOP,
    REQUEST_NUM_SYNC_STATUS,
    REQUEST_NUM_SYNC_ISRUNNING,
    REQUEST_NUM_SYNC_ADD,
    REQUEST_NUM_SYNC_ADD2,
    REQUEST_NUM_SYNC_START_AFTER_LOGIN,
    REQUEST_NUM_SYNC_DELETE,
    REQUEST_NUM_SYNC_GETPUBLICLINKURL,
    REQUEST_NUM_SYNC_GETPRIVATELINKURL,
    REQUEST_NUM_SYNC_ASKFORSTATUS,
    REQUEST_NUM_SYNC_SETSUPPORTSVIRTUALFILES,
    REQUEST_NUM_SYNC_SETROOTPINSTATE,
    REQUEST_NUM_SYNC_PROPAGATE_SYNCLIST_CHANGE,
    REQUEST_NUM_SYNCNODE_LIST,
    REQUEST_NUM_SYNCNODE_SETLIST,
    REQUEST_NUM_NODE_PATH,
    REQUEST_NUM_NODE_INFO,
    REQUEST_NUM_NODE_SUBFOLDERS,
    REQUEST_NUM_NODE_SUBFOLDERS2,
    REQUEST_NUM_NODE_FOLDER_SIZE,
    REQUEST_NUM_NODE_CREATEMISSINGFOLDERS,
    REQUEST_NUM_ERROR_INFOLIST,
    REQUEST_NUM_ERROR_GET_CONFLICTS,
    REQUEST_NUM_ERROR_DELETE_SERVER,
    REQUEST_NUM_ERROR_DELETE_SYNC,
    REQUEST_NUM_ERROR_DELETE_INVALIDTOKEN,
    REQUEST_NUM_ERROR_RESOLVE_CONFLICTS,
    REQUEST_NUM_ERROR_RESOLVE_UNSUPPORTED_CHAR,
    REQUEST_NUM_EXCLTEMPL_GETEXCLUDED,
    REQUEST_NUM_EXCLTEMPL_GETLIST,
    REQUEST_NUM_EXCLTEMPL_SETLIST,
    REQUEST_NUM_EXCLTEMPL_PROPAGATE_CHANGE,
#ifdef __APPLE__
    REQUEST_NUM_EXCLAPP_GETLIST,
    REQUEST_NUM_EXCLAPP_SETLIST,
    REQUEST_NUM_GET_FETCHING_APP_LIST,
#endif
    REQUEST_NUM_PARAMETERS_INFO,
    REQUEST_NUM_PARAMETERS_UPDATE,
    REQUEST_NUM_UTILITY_FINDGOODPATHFORNEWSYNC,
    REQUEST_NUM_UTILITY_BESTVFSAVAILABLEMODE,
#ifdef WIN32
    REQUEST_NUM_UTILITY_SHOWSHORTCUT,
    REQUEST_NUM_UTILITY_SETSHOWSHORTCUT,
#endif
    REQUEST_NUM_UTILITY_ACTIVATELOADINFO,
    REQUEST_NUM_UTILITY_CHECKCOMMSTATUS,
    REQUEST_NUM_UTILITY_HASSYSTEMLAUNCHONSTARTUP,
    REQUEST_NUM_UTILITY_HASLAUNCHONSTARTUP,
    REQUEST_NUM_UTILITY_SETLAUNCHONSTARTUP,
    REQUEST_NUM_UPDATER_VERSION,
    REQUEST_NUM_UPDATER_ISKDCUPDATER,
    REQUEST_NUM_UPDATER_ISSPARKLEUPDATER,
    REQUEST_NUM_UPDATER_STATUSSTRING,
    REQUEST_NUM_UPDATER_DOWNLOADCOMPLETED,
    REQUEST_NUM_UPDATER_UPDATEFOUND,
    REQUEST_NUM_UPDATER_STARTINSTALLER,
    REQUEST_NUM_UPDATER_UPDATE_DIALOG_RESULT,
    REQUEST_NUM_UTILITY_QUIT,
} RequestNum;

typedef enum {
    // User
    SIGNAL_NUM_USER_ADDED = 0,
    SIGNAL_NUM_USER_UPDATED,
    SIGNAL_NUM_USER_STATUSCHANGED,
    SIGNAL_NUM_USER_REMOVED,
    // Account
    SIGNAL_NUM_ACCOUNT_ADDED,
    SIGNAL_NUM_ACCOUNT_UPDATED,
    SIGNAL_NUM_ACCOUNT_REMOVED,
    // Drive
    SIGNAL_NUM_DRIVE_ADDED,
    SIGNAL_NUM_DRIVE_UPDATED,
    SIGNAL_NUM_DRIVE_QUOTAUPDATED,
    SIGNAL_NUM_DRIVE_REMOVED,
    SIGNAL_NUM_DRIVE_DELETE_FAILED,
    // Sync
    SIGNAL_NUM_SYNC_ADDED,
    SIGNAL_NUM_SYNC_UPDATED,
    SIGNAL_NUM_SYNC_REMOVED,
    SIGNAL_NUM_SYNC_PROGRESSINFO,
    SIGNAL_NUM_SYNC_COMPLETEDITEM,
    SIGNAL_NUM_SYNC_VFS_CONVERSION_COMPLETED,
    SIGNAL_NUM_SYNC_DELETE_FAILED,
    // Node
    SIGNAL_NUM_NODE_FOLDER_SIZE_COMPLETED,
    SIGNAL_NUM_NODE_FIX_CONFLICTED_FILES_COMPLETED,
    // Updater
    SIGNAL_NUM_UPDATER_SHOW_DIALOG,
    // Utility
    SIGNAL_NUM_UTILITY_SHOW_NOTIFICATION,
    SIGNAL_NUM_UTILITY_NEW_BIG_FOLDER,
    SIGNAL_NUM_UTILITY_ERROR_ADDED,
    SIGNAL_NUM_UTILITY_ERRORS_CLEARED,
    SIGNAL_NUM_UTILITY_SHOW_SETTINGS,
    SIGNAL_NUM_UTILITY_SHOW_SYNTHESIS
} SignalNum;

struct ArgsReader {
        template <class... Args>
        ArgsReader(Args... args) : stream(&params, QIODevice::WriteOnly) {
            read(args...);
        }
        template <class T>
        void read(const T p) {
            stream << p;
        }
        template <class T, class... Args>
        void read(const T p, Args... args) {
            stream << p;
            read(args...);
        }
        operator QByteArray() const { return params; }
        QByteArray params;
        QDataStream stream;
};

struct ArgsWriter {
        ArgsWriter(const QByteArray &results) : stream{QDataStream(results)} {};
        template <class T>
        void write(T &r) {
            stream >> r;
        }
        template <class T, class... Args>
        void write(T &r, Args... args) {
            stream >> r;
            extract(args...);
        }
        QDataStream stream;
};
