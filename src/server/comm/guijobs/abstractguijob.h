/*
 * Infomaniak kDrive - Desktop
 * Copyright (C) 2023-2025 Infomaniak Network SA
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "../abstractcommchannel.h"
#include "../commmanager.h"
#include "libsyncengine/jobs/abstractjob.h"

#include <Poco/JSON/Parser.h>
#include <Poco/Dynamic/Struct.h>

namespace KDC {

class AbstractGuiJob : public AbstractJob {
    public:
        enum class GuiJobType {
            None,
            Query,
            Signal
        };

        AbstractGuiJob(std::shared_ptr<CommManager> commManager, const std::string &inputParamsStr,
                       const std::shared_ptr<AbstractCommChannel> &channel);
        ~AbstractGuiJob() {}

        void runJob() override;

    protected:
        std::shared_ptr<CommManager> _commManager;
        std::string _inputParamsStr; // JSON format
        std::string _outputParamsStr; // JSON format
        std::shared_ptr<AbstractCommChannel> _channel;

        GuiJobType _type = GuiJobType::None;

        int _requestId;
        RequestNum _requestNum;
        Poco::DynamicStruct _inParams;
        Poco::DynamicStruct _outParams;

        // Deserialize _inputParmsStr into the input object used by the job
        virtual bool deserializeInputParms();
        // Serialize the output object generated by the job into _outputParmsStr
        virtual bool serializeOutputParms();
        // Process the input object to generate an output object
        virtual bool process();

        //! Read an input built-in/std::string/std::wstring/CommBLOB parameter.
        /*!
          \param parms is a Poco::DynamicStruct.
          \param key is the key of the JSON pair.
          \param value is the value of the JSON pair.
          \exception
                throws a Poco::RangeException if the value does not fit into the result variable.
                throws a Poco::NotImplementedException if conversion is not available for the given type.
                throws an Poco::InvalidAccessException if the key is not found.
                throws a std::runtime_error if T is an enum and the value is not in [T::Unknown + 1, T::EnumEnd]
        */
        template<typename T>
        static void readParamValue(const Poco::DynamicStruct &parms, const std::string &key, T &value) {
            if constexpr (std::is_same_v<T, bool>) {
                value = parms[key].convert<bool>();
            } else if constexpr (std::is_same_v<T, std::string> || std::is_same_v<T, std::wstring> ||
                                 std::is_same_v<T, CommBLOB>) {
                const auto base64Str = parms[key].convert<std::string>();
                convertFromBase64Str(base64Str, value);
            } else if constexpr (std::is_enum_v<T>) {
                int intValue;
                AbstractGuiJob::readParamValue(parms, key, intValue);
                if (intValue >= 1 && intValue < toInt<T>(T::EnumEnd)) {
                    value = fromInt<T>(intValue);
                } else {
                    throw std::runtime_error("Invalid enumeration value");
                }
            } else {
                value = parms[key].convert<T>();
            }
        }

        template<typename T>
        void readParamValue(const std::string &key, T &value) {
            AbstractGuiJob::readParamValue(_inParams, key, value);
        }

        //! Read an input std container parameter.
        /*!
          \param parms is a Poco::DynamicStruct.
          \param key is the key of the JSON pair.
          \param value is the value of the JSON pair.
          \exception
                throws a Poco::RangeException if the value does not fit into the result variable.
                throws a Poco::NotImplementedException if conversion is not available for the given type.
                throws an Poco::InvalidAccessException if the key is not found.
                throws a std::runtime_error if T is an enum and the value is not in [T::Unknown + 1, T::EnumEnd]
        */
        template<template<typename, typename> class C, typename T, typename A = std::allocator<T>>
        static void readParamValues(const Poco::DynamicStruct &parms, const std::string &key, C<T, A> &values,
                                    std::function<T(const Poco::Dynamic::Var &)> convertFct) {
            auto arrValues = parms[key].extract<Poco::Dynamic::Array>();
            std::transform(arrValues.begin(), arrValues.end(), std::back_inserter(values), convertFct);
        }

        template<template<typename, typename> class C, typename T, typename A = std::allocator<T>>
        void readParamValues(const std::string &key, C<T, A> &values, std::function<T(const Poco::Dynamic::Var &)> convertFct) {
            AbstractGuiJob::readParamValues(_inParams, key, values, convertFct);
        }

        template<template<typename, typename> class C, typename T, typename A = std::allocator<T>>
        void readParamValues(const std::string &key, C<T, A> &values) {
            std::function<T(const Poco::Dynamic::Var &)> convertFct = [](const Poco::Dynamic::Var &value) {
                if constexpr (std::is_same_v<T, std::string> || std::is_same_v<T, std::wstring> || std::is_same_v<T, CommBLOB>) {
                    const auto base64Str = value.convert<std::string>();
                    T str;
                    convertFromBase64Str(base64Str, str);
                    return str;
                } else {
                    return value.convert<T>();
                }
            };
            AbstractGuiJob::readParamValues(_inParams, key, values, convertFct);
        }

        //! Write an output built-in/std::string/std::wstring/CommBLOB parameter.
        /*!
          \param parms is a Poco::DynamicStruct.
          \param key is the key of the JSON pair.
          \param value is the value of the JSON pair.
        */
        template<typename T>
        static void writeParamValue(Poco::DynamicStruct &parms, const std::string &key, const T &value) {
            if constexpr (std::is_same_v<T, std::string> || std::is_same_v<T, std::wstring> || std::is_same_v<T, CommBLOB>) {
                std::string base64Str;
                convertToBase64Str(value, base64Str);
                parms.insert(key, base64Str);
            } else if constexpr (std::is_enum_v<T>) {
                parms.insert(key, toInt(value));
            } else {
                parms.insert(key, value);
            }
        }

        template<typename T>
        void writeParamValue(const std::string &key, const T &value) {
            AbstractGuiJob::writeParamValue(_outParams, key, value);
        }

        template<size_t n>
        void writeParamValue(const std::string &key, const char (&value)[n]) {
            AbstractGuiJob::writeParamValue(_outParams, key, std::string(value));
        }

        template<size_t n>
        void writeParamValue(const std::string &key, const wchar_t (&value)[n]) {
            AbstractGuiJob::writeParamValue(_outParams, key, std::wstring(value));
        }

        //! Write an output std container parameter.
        /*!
          \param parms is a Poco::DynamicStruct.
          \param key is the key of the JSON pair.
          \param value is the value of the JSON pair.
        */
        template<template<typename, typename> class C, typename T, typename A = std::allocator<T>>
        static void writeParamValues(Poco::DynamicStruct &parms, const std::string &key, const C<T, A> &values,
                                     std::function<Poco::Dynamic::Var(const T &)> convertFct) {
            Poco::Dynamic::Array arrValues;
            std::transform(values.begin(), values.end(), std::back_inserter(arrValues), convertFct);
            parms.insert(key, arrValues);
        }

        template<template<typename, typename> class C, typename T, typename A = std::allocator<T>>
        void writeParamValues(const std::string &key, const C<T, A> &values,
                              std::function<Poco::Dynamic::Var(const T &)> convertFct) {
            AbstractGuiJob::writeParamValues(_outParams, key, values, convertFct);
        }

        template<template<typename, typename> class C, typename T, typename A = std::allocator<T>>
        void writeParamValues(const std::string &key, const C<T, A> &values) {
            std::function<Poco::Dynamic::Var(const T &)> convertFct = [](const T &value) {
                if constexpr (std::is_same_v<T, std::string> || std::is_same_v<T, std::wstring> || std::is_same_v<T, CommBLOB>) {
                    std::string base64Str;
                    convertToBase64Str(value, base64Str);
                    return Poco::Dynamic::Var(base64Str);
                } else {
                    return Poco::Dynamic::Var(value);
                }
            };
            AbstractGuiJob::writeParamValues(_outParams, key, values, convertFct);
        }

        // Base64 conversion
        static void convertFromBase64Str(const std::string &base64Str, std::string &value);
        static void convertFromBase64Str(const std::string &base64Str, std::wstring &value);
        static void convertFromBase64Str(const std::string &base64Str, CommBLOB &value);

        static void convertToBase64Str(const std::string &str, std::string &base64Str);
        static void convertToBase64Str(const std::wstring &wstr, std::string &base64Str);
        static void convertToBase64Str(const CommBLOB &blob, std::string &base64Str);

        friend class TestAbstractGuiJob;
};

} // namespace KDC
