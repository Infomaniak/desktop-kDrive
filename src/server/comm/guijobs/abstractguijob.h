/*
 * Infomaniak kDrive - Desktop
 * Copyright (C) 2023-2025 Infomaniak Network SA
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "libsyncengine/jobs/abstractjob.h"
#include "../abstractcommchannel.h"
#include "../commmanager.h"
#include "libcommon/comm.h"
#include "libcommon/utility/utility.h"

#include <Poco/JSON/Parser.h>
#include <Poco/Dynamic/Struct.h>

namespace KDC {

class AbstractGuiJob : public AbstractJob {
    public:
        enum class GuiJobType {
            Unknown,
            Query,
            Signal
        };

        AbstractGuiJob(std::shared_ptr<CommManager> commManager, int requestId, const Poco::DynamicStruct &inParams,
                       std::shared_ptr<AbstractCommChannel> channel);
        AbstractGuiJob(std::shared_ptr<CommManager> commManager, std::shared_ptr<AbstractCommChannel> channel);

        ExitInfo runJob() final;

        // Deserialize inputParmsStr to get the request id, num and the parameters structure
        static bool deserializeGenericInputParms(const CommString &inputParamsStr, int &requestId, RequestNum &requestNum,
                                                 Poco::DynamicStruct &inParams);

        // Serialize the output object generated by the job into _outputParmsStr
        bool serializeGenericOutputParms(const ExitInfo &exitInfo);

    protected:
        static int _lastSignalId;

        std::shared_ptr<CommManager> _commManager;
        int _requestId = 0;
        RequestNum _requestNum = RequestNum::Unknown;
        int _signalId = 0;
        SignalNum _signalNum = SignalNum::Unknown;
        Poco::DynamicStruct _inParams;
        std::shared_ptr<AbstractCommChannel> _channel;
        GuiJobType _type = GuiJobType::Unknown;
        Poco::DynamicStruct _outParams;
        CommString _outputParamsStr;

        // Deserialize _inputParmsStr into the input object used by the job
        virtual ExitInfo deserializeInputParms() = 0;
        // Serialize the output object generated by the job into _outputParmsStr
        virtual ExitInfo serializeOutputParms() = 0;
        // Process the input object to generate an output object
        virtual ExitInfo process() = 0;

        //! Read an input parameter from _inParams.
        /*!
          \param parms is a Poco::DynamicStruct.
          \param key is the key of the JSON pair.
          \param value is the value of the JSON pair.
          \exception
                throws a Poco::RangeException if the value does not fit into the result variable.
                throws a Poco::NotImplementedException if conversion is not available for the given type.
                throws an Poco::InvalidAccessException if the key is not found.
                throws a std::runtime_error if T is an enum and the value is not in [T::Unknown + 1, T::EnumEnd]
        */
        template<typename T>
        void readParamValue(const std::string &key, T &value) {
            CommonUtility::readValueFromStruct(_inParams, key, value);
        }

        template<typename T>
        void readParamValue(const std::string &key, T &value, std::function<T(const Poco::Dynamic::Var &)> dynamicVar2T) {
            CommonUtility::readValueFromStruct(_inParams, key, value, dynamicVar2T);
        }

        template<template<typename, typename> class C, typename T, typename A = std::allocator<T>>
        void readParamValues(const std::string &key, C<T, A> &values, std::function<T(const Poco::Dynamic::Var &)> dynamicVar2T) {
            CommonUtility::readValuesFromStruct(_inParams, key, values, dynamicVar2T);
        }

        template<template<typename, typename> class C, typename T, typename A = std::allocator<T>>
        void readParamValues(const std::string &key, C<T, A> &values) {
            CommonUtility::readValuesFromStruct(_inParams, key, values);
        }

        //! Write an output parameter to _outParams
        /*!
          \param parms is a Poco::DynamicStruct.
          \param key is the key of the JSON pair.
          \param value is the value of the JSON pair.
        */
        template<typename T>
        void writeParamValue(const std::string &key, const T &value) {
            CommonUtility::writeValueToStruct(_outParams, key, value);
        }

        template<size_t n>
        void writeParamValue(const std::string &key, const char (&value)[n]) {
            CommonUtility::writeValueToStruct(_outParams, key, std::string(value));
        }

        template<size_t n>
        void writeParamValue(const std::string &key, const wchar_t (&value)[n]) {
            CommonUtility::writeValueToStruct(_outParams, key, std::wstring(value));
        }

        template<typename T>
        void writeParamValue(const std::string &key, const T &value, std::function<Poco::Dynamic::Var(const T &)> t2DynamicVar) {
            CommonUtility::writeValueToStruct(_outParams, key, value, t2DynamicVar);
        }

        template<template<typename, typename> class C, typename T, typename A = std::allocator<T>>
        void writeParamValues(const std::string &key, const C<T, A> &values,
                              std::function<Poco::Dynamic::Var(const T &)> t2DynamicVar) {
            CommonUtility::writeValuesToStruct(_outParams, key, values, t2DynamicVar);
        }

        template<template<typename, typename> class C, typename T, typename A = std::allocator<T>>
        void writeParamValues(const std::string &key, const C<T, A> &values) {
            CommonUtility::writeValuesToStruct(_outParams, key, values);
        }

        friend class TestAbstractGuiJob;
        friend class TestGuiCommChannel;
};

using AbstractGuiJobSharedConst = std::function<std::shared_ptr<AbstractGuiJob>(
        std::shared_ptr<CommManager> commManager, int requestId, const Poco::DynamicStruct &inParams,
        std::shared_ptr<AbstractCommChannel> channel)>;

} // namespace KDC
