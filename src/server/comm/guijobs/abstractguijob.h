/*
 * Infomaniak kDrive - Desktop
 * Copyright (C) 2023-2025 Infomaniak Network SA
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "../abstractcommchannel.h"
#include "../commmanager.h"
#include "libsyncengine/jobs/abstractjob.h"

#include <Poco/JSON/Parser.h>

namespace KDC {

class AbstractGuiJob : public AbstractJob {
    public:
        enum class GuiJobType {
            None,
            Query,
            Signal
        };

        AbstractGuiJob(std::shared_ptr<CommManager> commManager, const CommString &inputParmsStr,
                       const std::shared_ptr<AbstractCommChannel> &channel);
        ~AbstractGuiJob() {}

        void runJob() override;

    protected:
        GuiJobType _type = GuiJobType::None;
        std::shared_ptr<CommManager> _commManager;
        CommString _inputParmsStr;
        Poco::JSON::Object::Ptr _inputParmsJSON;
        CommString _outputParmsStr;
        std::shared_ptr<AbstractCommChannel> _channel;

        // Deserialize _inputParmsStr into the input object used by the job
        virtual bool deserializeInputParms();
        // Serialize the output object generated by the job into _outputParmsStr
        virtual bool serializeOutputParms() { return true; }
        // Process the input object to generate an output object
        virtual bool process();
};

} // namespace KDC
